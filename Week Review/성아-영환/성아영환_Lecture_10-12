- **Inheritance**
    - 객체지향의 특징
        - Encapsulation : 정보 은닉
            
            관련된 필드와 메소드를 하나의 캡슐처럼 포장해 세부 내용을 외부에서 알 수 없도록 은닉
            
        - Inheritance : 상속
            
            자녀가 부모 재산을 상속받아 사용하듯이, 상위 객체를 상속받은 하위 객체가 상위 객체의 메소드와 필드를 사용
            
            상속은 개발된 객체를 재사용하는 방법 중 하나
            
        - Polymorphism : 다형성
            
            대입되는 객체에 따라서 메서드를 다르게 동작하도록 구현하는 기술
            
            실행 도중 동일한 이름의 다양한 구현체 중에서 메소드를 선택 가능
            
    - 상속 (Inheritance)
        
        기존 클래스를 확장하는 개념으로, 부모 클래스를 자식 클래스가 물려받는 것
        
        - 부모 클래스 (parent class): 기반이 되는 클래스
        - 자식 클래스 (child class): 이를 토대로 확장된 새 클래스
        
        상속을 활용하면,
        
        - 코드 중복 감소
        - 클래스의 확장 가능성
        - 부모 클래스의 변경사항을 모든 자식 클래스에 반영
        
        상속 사용 예시
        
        - 중복 코드 제거
        - 클래스 확장
        - 부모 클래스의 코드 반영
            
            부모 클래스의 변경은 모든 자식 클래스에 일괄 반영
            
    - 상속과 업캐스팅
        - 상속 관계가 정의된 자식 객체는 부모의 타입으로 해석되어 업 캐스팅 될 수 있다.
            
            이를 통해 서로 다른 자식 객체를 부모의 타입으로 묶어 관리 가능
            
        - 하지만 부모 객체를 자식 타입으로 다운 캐스팅하여 좁은 범위로 해석할 수는 없다.
            
            즉, 자식 객체는 부모 타입으로 해석 가능하나 부모 객체를 자식 타입으로는 해석 불가능
            
    - 메소드 오버라이딩 (Method Overriding)
        - 자식 클래스에서 재정의된 메소드가 수행되는 것으로, 적은 코드로 다양한 동작이 가능
    - 생성자 호출과 실행 흐름
        - 상속 관계에서 자식 객체가 만들어지려면 부모 영역이 먼저 완성되어야 한다.
        - 부모 영역을 완성하려면 반드시 생성자를 호출해야 한다.
            
            이를 생략한 경우에는 부모 생성자 호출 코드 super()가 자동 삽입
            
    - 생성자를 통한 상속 객체의 초기화
    - 추상 클래스
        - 직접 객체를 만들어낼 수 없는 개념적 클래스
            
            자식 객체 생성을 위해 개념적으로 분리된 부모 클래스
            
            개와 고양이를 동물로 분류하지만, 동물은 분류를 위해 만든 추상적 개념으로 실존하지 않는 것과 같다.
            

- **Java API**
    - Java API (Application Programming Interface)
        
        프로그램 개발을 위한 도구로, Java가 제공하는 코드로 코드가 미리 준비되어 있어 더 편리한 프로그램 작성을 돕는다.
        
        Java API의 대표적 예시
        
        - System.out.printf( ), Math.random( ), Math.PI 등
    
    > 패키지에 담겨 제공되는 Java API를 활용하기 위해 먼저 패키지에 대해 알아야 한다.
    > 
    - 패키지 (Package)
        
        패키지란 Java 코드의 묶음으로, 일종의 폴더(디렉터리)
        
        - 관련 코드를 한곳에 모아 관리
        - 이름만 같은 다른 코드 구분 가능
    - 패키지와 모듈
        - 패키지 : 상호 관련 있는 클래스와 인터페이스를 한곳에 묶어 놓은 것
        - 모듈 : 밀접한 관계가 있는 패키지와 리소스를 묶어 놓은 것
            
            JDK를 설치하면 jmods 폴더에 Java 모듈인 jmod 파일을 제공
            
        - Java의 주요 패키지 및 모듈
            
            ![스크린샷 2022-08-24 오전 1.25.50.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/db818174-f1d8-4c5b-813f-470786c0784a/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_1.25.50.png)
            
    - java.lang 패키지
        
        필수 패키지로, Java에서 가장 기본이 되는 클래스와 인터페이스를 보관하며, import문 없이 사용할 수 있다.
        
        - java.lang 패키지에 포함된 주요 클래스
            
            ![스크린샷 2022-08-24 오전 1.29.37.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d9dc4b36-f787-4081-a8f2-3f965e20ab6c/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_1.29.37.png)
            
            - Object 클래스
                
                최상위 클래스로 객체와 관련된 클래스로 모든 클래스의 조상이다.
                
                - Object 클래스가 제공하는 주요 메소드
                    
                    ![스크린샷 2022-08-24 오전 1.32.18.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3bf3cca1-fc38-42fa-9eac-1905c32696d5/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_1.32.18.png)
                    
                - Class 클래스
                    
                    실행 중인 프로그램 내부에 포함된 클래스와 인터페이스 정보를 제공하며 getName( ), getSimpleName( ) 등 다양한 메서드를 제공
                    
                    생성자가 없고 어떤 객체라도 생성하면 JVM이 대응하는 Class 객체를 자동으로 생성
                    
                    실행 도중 객체 정보를 얻으려면 getClass( )의 결과인 Class객체를 사용
                    
                    ```java
                    Class cls = obj /* 임의의 객체 */ .getClass() /* object 클래스에서 상속받은 메소드로 Class 객체를 반환 */ ;
                    ```
                    
                - System 클래스
                    
                    표준 입출력을 비롯한 실행 시스템과 관련된 필드와 메소드를 static으로 제공
                    
                    우리가 자주 사용하는 System.out.println( )도 System 클래스가 제공하는 메소드
                    
                    - System 클래스의 세 가지 필드
                        
                        ![스크린샷 2022-08-24 오전 1.43.48.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ba283e34-fee9-4680-bee8-0c447f0156d1/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_1.43.48.png)
                        
                    - System 클래스가 제공하는 주요 메소드
                        
                        ![스크린샷 2022-08-24 오전 1.45.39.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d94b2090-85c3-4a14-85c8-ebc2e38b89e7/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_1.45.39.png)
                        
                    - Java에서는 운영체제로부터 할당 받은 메모리를 JVM이 관리
                        
                        이때 JVM은 메모리가 부족하거나 주기적으로 가비지 컬렉터를 사용해 가비지를 수거
                        
                        - 가비지를 수거하는 순서는 객체의 생성 순서와는 무관하며 프로그램에서 가비지 컬렉터를 직접 호출 불가능
                            
                            대신 System.gc( )로 JVM에 최대한 빠르게 가비지 컬렉터를 실행하도록 요청 가능
                            
                - Math 클래스
                    
                    수학과 관련된 Java API
                    
                    모든 메서드가 static이기 때문에 객체를 생성하지 않고 메소드 호출
                    
                    지수와 로그, 제곱근과 삼각함수 등의 연산을 제공
                    
                    - Math 클래스가 제공하는 주요 double 타입의 메소드
                        
                        ![스크린샷 2022-08-24 오전 1.49.00.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ba580814-70c5-4bf5-97cf-169f9cc1ae4f/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_1.49.00.png)
                        
                    - Math 클래스가 제공하는 주요 double 타입의 메서드 (cont.)
                        
                        ![스크린샷 2022-08-24 오전 1.50.05.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2e69fbb5-43b9-4ff2-ad74-8fb0c61a1171/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_1.50.05.png)
                        
                - java.util 패키지
                    
                    날짜, 시간, 리스트, 벡터, 컬렉션 등 다양한 유틸리티 클래스와 인터페이스 제공
                    
                    - java.util 패키지가 제공하는 주요 클래스
                        
                        ![스크린샷 2022-08-24 오전 1.52.25.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/aecd669e-75aa-48a2-a2bd-3dd5550a56ec/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_1.52.25.png)
                        
                - Random 클래스
                    
                    난수 생성을 위한 Java API로, 임의의 값을 쉽게 만들어 준다.
                    
                    Math.random( )과 달리 객체를 만들어 사용
                    
                    - Random 클래스가 제공하는 주요 메소드
                        
                        ![스크린샷 2022-08-24 오전 1.54.20.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/115c9f70-6bb8-40df-887d-a9c006f69363/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_1.54.20.png)
                        
                - ArrayList 클래스
                객체들을 저장할 수 있는 Java API로, 객체 관리를 돕는 배열의 또 다른 형태로 java.util 패키지에 위치
                    
                    ![스크린샷 2022-08-24 오전 1.55.55.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d41a1545-a480-416f-bac6-f4388d252674/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_1.55.55.png)
                    
                - Data 클래스
                    
                    현재 날짜와 시각 정보를 제공하나 국제화에 맞지 않아 대부분의 메소드는 폐기 중이다.
                    
                    주로 하위 호환성이나 간단한 날짜 정보를 원할 때만 사용
                    
                - Calendar 클래스
                    
                    달력에 대한 정보를 제공하는 클래스
                    
                    지역이나 문화에 따라 달력을 표시하는 방식이 다르기 때문에 추상 클래스로 되어 있다.
                    
                    - 표준 달력을 사용한다면 다음과 같이 객체 생성
                        
                        ```java
                        Calender now = Calender.getInstance();
                        ```
                        
                    - Calendar 클래스가 제공하는 정수 타입의 상수 및 주요 메소드
                        
                        ![스크린샷 2022-08-24 오전 1.59.01.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a7d122c8-b99b-4f0b-83af-7533f0a8014a/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_1.59.01.png)
                        
                - StringTokenizer 클래스
                    
                    문자열을 토큰으로 분리하는 데 사용
                    
                    토큰은 공백이나 줄 바꿈 등 구분자를 사용해 문자열을 분리
                    
                    - StringTokenizer 클래스의 주요 생성자
                        
                        기본 구분자는 공백, 탭, 줄 바꿈, 복귀, 용지 먹임 문자
                        
                        ![스크린샷 2022-08-24 오후 2.28.49.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d676ec10-0db6-4d1e-ac2e-fec87d6c264e/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_2.28.49.png)
                        
                    - StringTokenizer 클래스가 제공하는 주요 메소드
                        
                        ![스크린샷 2022-08-24 오후 2.29.34.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7013be7a-2cf3-43c6-a7be-3b8e39160414/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_2.29.34.png)
                        
                - 파일 입출력 (File Input/Output)
                    
                    데이터를 파일로부터 입력받거나 파일에 출력하는 것
                    
                    - 데이터 보존이 목적
                        
                        (실행 중인 프로그램 속 데이터는 사라지기 때문이다.)
                        
                    - cf) 파일(file)이란 데이터 관리를 위한 논리적 단위
                        
                        파일화된 데이터는 스토리지(storage)에 의해 반영구적 보존이 가능
                        
                    - 파일 입출력 과정
                        
                        파일 입출력은 크게, 연결-입출력-해제 순으로 동작
                        
                        1. 연결 : 물리적 파일과 실행중인 프로그램 사이의 데이터의 흐름 생성 과정
                        2. 입출력 : 데이터 흐름을 통해 값을 주고받는 과정
                        3. 해제 : 데이터 흐름을 해제함으로써 파일과의 연결을 종료하는 과정
                            
                            ![스크린샷 2022-08-24 오후 2.34.54.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2f9aa1f3-31ca-42c5-a16e-fc4daceb5ece/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_2.34.54.png)
                            
                - 파일 입출력 기본 API
                Java는 파일 입출력을 위한 API를 java.io 패키지에 담아 제공
                    - 가장 기본이 되는 클래스는 File, FileWriter, FileReader 등
                        
                        ![스크린샷 2022-08-24 오후 2.36.14.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/81b89473-5865-41a3-983e-5686b51c6d5d/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_2.36.14.png)
                        
                        - File 클래스
                        물리적 파일을 참조하기 위한 클래스
                            
                            파일 경로를 지정해 객체를 만들 수 있고 이를 통해 다양한 기능 제공
                            
                            - File 클래스의 대표 기능들
                                
                                ![스크린샷 2022-08-24 오후 2.37.55.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ea8da246-2465-43e1-9c18-e8e1afe93e45/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_2.37.55.png)
                                
                        - FileWriter 클래스
                        파일에 문자 출력을 가능케 하는 클래스
                            
                            File 객체 또는 파일 경로를 지정해 객체를 만들 수 있으며, 다양한 기능 제공
                            
                            - FileWriter 클래스의 대표 기능들
                                
                                ![스크린샷 2022-08-24 오후 2.45.29.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cecd8e40-4b79-4b7f-9318-bb154f5480c9/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_2.45.29.png)
                                
                        - FileReader 클래스
                        파일로 부터 문자 입력을 받아오는 클래스
                            
                            File 객체 또는 파일 경로를 지정해 객체를 만들 수 있으며, 다양한 기능 제공
                            
                        - FileReader 클래스의 대표 기능들
                            
                            ![스크린샷 2022-08-24 오후 2.46.53.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e9edff0d-4080-4f18-9971-49a9c276b2f0/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_2.46.53.png)
                            
    - 파일 입출력 기본 API
        
        Java는 수많은 입출력 도구를 java.io 패키지로 제공
        
        이들은 클래스와 인터페이스를 활용한 객체 지향 프로그래밍의 표본으로, 데이터의 단위와 입력 및 출력을 기준으로 파생
        
        ![스크린샷 2022-08-24 오후 2.50.08.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/78762072-e16b-415a-8dfa-6d9f3963dfd8/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_2.50.08.png)
        

- **예외 처리 (Exception Handling)**
    - 예외 (Exception)
        
        프로그램상의 문제로, 처리가 필요한 일종의 이벤트(사건)
        
        처리되지 못한 예외는 프로그램을 멈추게 한다.
        
        ex) 배열을 벗어난 인덱스 접근으로 예외가 발생하는 프로그램
        
        예외가 발생하면 비정상적인 종료를 막고, 프로그램을 계속 진행할 수 있도록 우회 경로를 제공하는 것이 바람직
        
    - 예외 잡아 처리하기
        - try-catch 문
            
            ```java
            try {
            	예외가 발생할 수 있는 코드; /* 예외 발생 시, 예외 객체 생성 */
            } catch (예외_타입 A 레퍼런스변수) {
            	예외 A 처리를 위해 수행될 코드
            } catch (예외_타입 B 레퍼런스변수) {
            	예외 B 처리를 위해 수행될 코드
            } finally /* 생략 가능 */ {
            	예외 발생과 상관없이 항상 수행할 내용
            }
            ```
            
        - 
    - 예외 클래스의 상속 구조
        
        모든 예외는 조상격 클래스인 Throwable로부터 파생
        
         java.lang 패키지에 위치
        
        프로그램의 모든 문제적 상황을 정의한 것
        
        Error와 Exception 클래스로 확장
        
        - 에러(error) : 개발자가 해결할 수 없는 치명적인 오류, 즉 프로그래밍 외적 문제(메모리 부족, 장치 고장 등)
        - 예외(exception) : 개발자가 해결할 수 있는 오류, 즉 프로그래밍 내적 문제
            
            코드로 처리 가능한 모든 예외(잘못된 산술 연산, 인덱스 접근 등)
            
        
        ![스크린샷 2022-08-24 오후 3.01.52.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/81515347-02f0-433a-88dd-609d4326a969/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_3.01.52.png)
        
    - 예외의 종류
        - 실행 예외
            
            예외가 발생하면 JVM은 해당하는 실행 예외 객체를 생성
            
            실행 예외는 컴파일러가 예외 처리 여부를 확인하지 않는다.
            
            따라서 개발자가 예외 처리 코드의 추가 여부를 결정
            
            - 대표적인 실행 예외
                
                ![스크린샷 2022-08-24 오후 3.06.47.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9b45122b-6d55-4fb2-87a0-787f219cdc77/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_3.06.47.png)
                
        - 일반 예외
            
            컴파일러는 발생할 가능성을 발견하면 컴파일 오류를 발생
            
            개발자는 예외 처리 코드를 반드시 추가
            
            - 대표적인 일반 예외
                
                ![스크린샷 2022-08-24 오후 3.20.33.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c9398302-fcce-4430-a63a-9c9bd04debed/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_3.20.33.png)
                
        - 실행 예외와 일반 예외 비교
            
            ![스크린샷 2022-08-24 오후 3.23.21.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ee78b141-f53d-4924-8f5d-7209d4fac1c5/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_3.23.21.png)
            
        - 사용자 정의형 예외
            
            Java에서 제공하는 예외를 상속을 통해 확장한 것
            
            ```java
            class MyException extends Exception /* Exception 클래스를 상속 */ {
            	public MyException(String message) {
            		super(message /* 예외 발생 시 남겨질 문자열 */);
            	}
            }
            ```
            
    - 예외의 발생과 전달
        - 예외 발생의 키워드 throw
            
            예외의 발생은 throw 키워드를 통해 강제될 수 있다.
            
            이때 throw와 함께 예외 객체를 전달해야 한다.
            
            ```java
            throw /* 객체를 던져 예외를 발생 */  new 예외_생성자() /* 예외 객체 생성 */ ;
            ```
            
            참고) Throwable 클래스의 주요 메소드
            
            - Exception 클래스는 Throwable 클래스를 상속
            - Exception 객체는 Throwable 클래스의 필드와 메소드를 사용 가능
            
            ![스크린샷 2022-08-24 오후 3.56.20.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c0340c7b-8bf3-460a-be73-1e121b41229b/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-08-24_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_3.56.20.png)
            
            - 발생된 예외는 throws 키워드로 메소드 호출 위치로 전달 가능 (즉, 처리를 위임)
                
                ```java
                메소드() throws 예외 A, 예외 B /* 해당 예외를 직접 처리하지 않고, 호출자 메소드로 전달 */ {
                	...
                }
                ```
                
                - 예외 전달 선언
                    
                    throws에 등록된 예외는 직접 처리하지 않고, 해당 메소드를 호출한 위치로 전달